<apex:page controller="Chess" setup="false">

    <audio id="moveSound" src="{!URLFOR($Resource.moveSound)}" preload="auto"></audio>

    <head>
        <style>
            :root {
              --n: 60px;
              --m: 35px;
            }

            .left_right{
                display: flex;
                justify-content: center;
            }

            @media (max-width:900px) {
            .left_right{
                display: flex;
                flex-direction: column;
                align-items: center;
            }
            }
            .chessBoard {
                /* width: calc(var(--n)*9);
                height: calc(var(--n)*9); */
                display: inline-grid;
                grid-template-columns: repeat(8, 1fr);
                border: 4px solid black;
                align-items: center;
            }

            .square {
                width: var(--n);
                height: var(--n);
                display: flex;
                justify-content: center;
                align-items: center;
                font-size: 4em; /* Adjust size of chess pieces */
                border: 2px solid black;
            }
            
            .piece {
                user-select: none; /* Prevents text selection */
                display: flex;
                width: var(--n);
                height: var(--n);
                justify-content: center;
                align-items: center;
                font-size: larger;
            } 

            .makeboard {
                    display: inline-grid;
                    grid-template-areas: "up up up"
                                        "left box right"
                                        "down down down";
            }
            
            .up, .down, .left, .right{
                background: radial-gradient(circle at 50% 100%, #260e0e80 5%, #260e0e 5% 10%, #260e0e80 10% 15%, #260e0e 15% 20%, #260e0e80 20% 25%, #260e0e 25% 30%, #260e0e80 30% 35%, #260e0e 35% 40%, transparent 40%), radial-gradient(circle at 100% 50%, #260e0e80 5%, #260e0e 5% 10%, #260e0e80 10% 15%, #260e0e 15% 20%, #260e0e80 20% 25%, #260e0e 25% 30%, #260e0e80 30% 35%, #260e0e 35% 40%, transparent 40%), radial-gradient(circle at 50% 0%, #260e0e80 5%, #260e0e 5% 10%, #260e0e80 10% 15%, #260e0e 15% 20%, #260e0e80 20% 25%, #260e0e 25% 30%, #260e0e80 30% 35%, #260e0e 35% 40%, transparent 40%), radial-gradient(circle at 0 50%, #260e0e80 5%, #260e0e 5% 10%, #260e0e80 10% 15%, #260e0e 15% 20%, #260e0e80 20% 25%, #260e0e 25% 30%, #260e0e80 30% 35%, #260e0e 35% 40%, transparent 40%);
                background-size: 3em 3em;
                background-color: #824f4f;
                opacity: 1;
                background-position: -0.4% 19%;
            }

            .up, .down {
                /* width: var(--m); */
                /* height: var(--m); */
                display: flex;
                padding-left: var(--m);
                padding-right: var(--m);
                justify-content: space-around;;
            }

            .left, .right{
                /* width: var(--m); */
                /* height: var(--m); */
                display: flex;
                justify-content: space-around;
                flex-direction: column;
            }

            .up{
                grid-area: up;
            }
            .down{
                grid-area: down;
            }
            .left{
                grid-area: left;
            }
            .right{
                grid-area: right;
            }

            .box{
                /* border: 2px solid black; */
                width: var(--m);
                height: var(--m);
                display: flex;
                align-items: center;
                justify-content: center;
                /* background-color: white; */
                color: white;
                font-size: 1.5em;
            }

            .blackcheck, .whitecheck{
                background-color: orangered !important;
            }

            .white {
                background-color: white;
            }

            .black {
                background-color: gray;
            }

            .avail{
                background-color: aqua;
            }

            .target{
                background-color: greenyellow;
            }

            .enemy{
                background-color: crimson;
            }
            
            .avail_2nd{
            	background-color: darkcyan;
            }

            .move_grid{
                background: linear-gradient(to bottom, #ffffff8a 23px, #ff4c4c 23px, transparent 28px), linear-gradient(to right, transparent 26px, #ff4c4c 26px, #ff4c4c 28px, transparent 27px), linear-gradient(to right, transparent 30px, #ff4c4c 30px, #ff4c4c 31px, transparent 32px), repeating-linear-gradient(to bottom, #b9b5b4, #898785 23px, #015fce8f 23px, #cacacac4 25px);
                border: 1px solid #302e2e;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                /* color: white; */
                font-weight: bold;
                font-size: small;
            }

            .move_grid{
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                grid-template-rows: repeat(32, 1fr);
                width: 300px;
                padding-left: 50px;
                overflow-x: auto;
                height: 600px;
            }
            .move_grid_text{
                height: 25px;
            }

            .picture{
                    width: 58px;
                    height: 58px;
                    font-size: 52px;
                    text-align: center;
            }

            input[type=checkbox] {
                height: 0;
                width: 0;
                visibility: hidden;
            }

            label {
                cursor: pointer;
                /* text-indent: -9999px; */
                width: 100px;
                height: 50px;
                background: #bada55;
                display: flex;
                /* border-radius: 100px; */
                position: relative;
                justify-content: space-around;
                align-items: center;
            }

            label:after {
                content: '';
                position: absolute;
                top: 4%;
                left: calc(100% - 5px);
                width: 50%;
                height: 90%;
                background: #fff;
                /* border-radius: 90px; */
                transform: translateX(-100%);
                transition: 0.3s;
            }

            input:checked + label {
                background: #bada55;
            }

            input:checked + label:after {
                left: calc(100% - 5px);
                transform: translateX(-100%);
            }

            input:not(:checked) + label {
                background: grey;
            }

            input:not(:checked) + label:after {
                left: 5px;
                transform: translateX(0);
            }

            label:active:after {
                width: 130px;
            }

            body {
                display: flex;
                justify-content: center;
                align-items: center;
                /* height: 100vh; */
            }

            .eval_bar {
                display: flex;
                align-items: flex-end;
                justify-content: center;
                /* padding-top: 10px;
                padding-bottom: 10px; */
                color: white;
                height: 48%;
                width: 25px;
                background-color: #000000;
                transition-property: height;
                transition-duration: 0.7s;
                transition-timing-function: ease-in-out;
            }

            .right_panel{
                display: inline-grid;
                grid-template-areas:
                    "controls"
                    "chess_move"
                    "options";
            }

            .controls{
                 display: flex;
                 grid-area: controls;
            }

            .options{
                 display: flex;
                 grid-area: options;
            }

            .chess_move{
                grid-area: chess_move;
            }


        </style>
        <script>
            function playMoveSound() {
                const moveSound = document.getElementById('moveSound');
                moveSound.volume = 0.7;
                moveSound.play();
            }

            function remove_class(str){
                var elems = document.querySelectorAll('.'+str);

                [].forEach.call(elems, function (el) {
                    el.classList.remove(str);
                });
            }

            function box_onclick(event){
                console.log("onclick    "+event.target.id);
                if (event.target.classList.contains('piece')) {
                    toSquare = event.target.closest('.square');
                }
                else
                {
                    toSquare=event.target;
                }

                console.log(toSquare.id);
                console.log(toSquare.querySelector('.piece'));

                if (toSquare.classList.contains('avail') && document.querySelectorAll('.target').length==1) {
                    call_move(document.querySelectorAll('.target')[0].querySelector('.piece').id, toSquare.id);
                }
                else
                {
                    if(toSquare.querySelector('.piece')!=null)
                    {
                        put_color(toSquare.id);
                        console.log('put color');
                    }
                    else
                    {
                        remove_class('avail');
                        remove_class('target');
                        remove_class('enemy');
                        remove_class('avail_2nd');
                    }
                }
                
            }

            ws = new WebSocket('wss://chess-api.com/v1');

            // 2. Register callback to Log every incomming message in the console:
            ws.onmessage = (event) => {
                const chessApiMessage = JSON.parse(event.data);
                // console.log(chessApiMessage);
                if("winChance" in chessApiMessage)
                {
                    document.querySelector('.eval_bar').innerText = chessApiMessage['eval'].toFixed(1);
                    document.querySelector('.eval_bar').style.height = parseInt(100 - chessApiMessage['winChance']) + '%';
                }
            };

            // 1. Create a handy function for sending requests:
            async function postChessApi(data = {}) {
                const response = await fetch("https://chess-api.com/v1", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data),
                });
                return response.json();
            }
            

            function call_move(data,target)
            {
                console.log("call_move  "+data,target);
                var piece = document.getElementById(data);
                var fromSquare = piece.closest('.square'); //parent div
                if (event.target.classList.contains('piece')) {
                    toSquare = event.target.closest('.square');
                }
                else
                {
                    var toSquare = document.getElementById(target);
                }

                // Check if the event.target is the piece or the square
                if (toSquare.querySelector('.piece') != null) {
                    toSquare.querySelector('.piece').remove(); //remove old piece
                }

                toSquare.appendChild(document.getElementById(data));

                var fromX = fromSquare.getAttribute('data-x');
                var fromY = fromSquare.getAttribute('data-y');
                var toX = toSquare.getAttribute('data-x');
                var toY = toSquare.getAttribute('data-y');

                remove_class('avail');
                remove_class('target');
                remove_class('enemy');

                console.log('drop now updateBoard ' + fromX + ',' + fromY + ',' + ',' + toX + ',' + toY);

                // Update the board using JavaScript Remoting
                Chess.updateBoard(
                    parseInt(fromX),
                    parseInt(fromY),
                    parseInt(toX),
                    parseInt(toY),
                    function (result, ev) {
                        if (ev.status) {
                            console.log(ev.status);
                            console.log('call_move '+result);
                            console.log(result[0],result[1]);
                            if (result == 'need to update') {
                                rerenderchessBoardPanel();
                            }
                            else
                            {
                                rerendermovesPanel();
                                playMoveSound();
                                if (result[0]==1) {
                                    document.getElementById('blackking').closest('.square').classList.add('blackcheck');
                                    console.log('1');
                                }
                                else
                                {
                                    remove_class('blackcheck');
                                    console.log('2');
                                }
                                if (result[1]==1) {
                                    document.getElementById('whiteKing').closest('.square').classList.add('whitecheck');
                                    console.log('3');
                                }
                                else
                                {
                                    remove_class('whitecheck');
                                    console.log('4');
                                }

                                document.querySelector("div.chessBoard div[data-x='"+fromX+"'][data-y='"+fromY+"']").classList.add('target');
                                document.querySelector("div.chessBoard div[data-x='" + toX + "'][data-y='" + toY + "']").classList.add('target');

                                
                                fen_str=result.substr(3);

                                        ws.send(JSON.stringify({
                                            fen: fen_str
                                        }));

                                        if (document.getElementById('switchValue').value == 1) {
                                            postChessApi({ fen: fen_str }).then((data) => {
                                                console.log(data);

                                                fromX = (8 - data.fromNumeric % 10);
                                                fromY = (Math.floor(data.fromNumeric / 10) - 1);
                                                toX = (8 - data.toNumeric % 10);
                                                toY = (Math.floor(data.toNumeric / 10) - 1);

                                                console.log('from ' + fromX + ' ' + fromY);
                                                console.log('to ' + toX + ' ' + toY);
                                                Chess.updateBoard(
                                                    fromX,
                                                    fromY,
                                                    toX,
                                                    toY,
                                                    function (result, ev) {
                                                        if (ev.status) {
                                                            console.log(ev.status);
                                                            console.log('call_move ' + result);
                                                            console.log(result[0], result[1]);

                                                            rerendermovesPanel();
                                                            rerenderchessBoardPanel();

                                                            setTimeout(function () {
                                                                playMoveSound();
                                                                console.log('done enemy move');

                                                                remove_class('target');

                                                                document.querySelector("div.chessBoard div[data-x='" + fromX + "'][data-y='" + fromY + "']").classList.add('target');
                                                                document.querySelector("div.chessBoard div[data-x='" + toX + "'][data-y='" + toY + "']").classList.add('target');

                                                                ws.send(JSON.stringify({
                                                                    fen: result.substr(3)
                                                                }));

                                                            }, 500);
                                                        }
                                                    }
                                                )
                                            });
                                        }
                                
                            }
                        }
                    }
                )
            }

            function put_color(toSquare){
                console.log(toSquare);
                var pos = document.getElementById(toSquare);

                // if (pos.classList.contains('piece')) {
                //     pos = event.target.closest('.square');
                // }

                var X = pos.getAttribute('data-x');
                var Y = pos.getAttribute('data-y');

                Chess.updateAvailable(
                    parseInt(X),
                    parseInt(Y),
                    function (result, ev) {
                        if (ev.status) {
                            console.log(ev.status);
                            console.log(result);

                            remove_class('avail');
                            remove_class('target');
                            remove_class('enemy');
                            remove_class('avail_2nd');

                            pos.classList.add('target');
							if(result.list_z.length>0)
                            {
                                result.list_z.forEach(element => {
                                    document.getElementById(element.x + '_' + element.y + '_square').classList.add('avail_2nd');
                                });
                            }
                            if(result.list_x.length>0)
                            {
                                result.list_x.forEach(element => {
                                    document.getElementById(element.x + '_' + element.y + '_square').classList.add('avail');
                                });
                            }
                            if (result.list_y.length > 0) {
                                result.list_y.forEach(element => {
                                    document.getElementById(element.x + '_' + element.y + '_square').classList.add('enemy');
                                });
                            }
                        }
                    }
                );
            }

            function allowDrop(event) {
                event.preventDefault();
            }

            function drag(event) {
                // put_color(event.target.closest('.square').id);
                event.dataTransfer.setData("text", event.target.id);
            }

            function drop(event) {
                event.preventDefault();

                var data = event.dataTransfer.getData("text");

                console.log("drop   " +data, event.target.id);

                if(event.target.id==data)
                {
                    return;
                }

                call_move(data, event.target.id);
            }
            
            function back() {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.Chess.back_back}', 
                    function (result, event) {
                        if (event.status) {
                            rerenderchessBoardPanel(); 
                            rerendermovesPanel(); 
                        } else {
                            console.log('Error: ' + event.message);
                        }
                    }
                );
            }

            function check_for_check(){
                Chess.check_for_check(
                    function (result, ev) {
                        if (ev.status) {
                            if (result[0] == 1) {
                                document.getElementById('blackking').closest('.square').classList.add('blackcheck');
                                console.log('1');
                            }
                            else {
                                remove_class('blackcheck');
                                console.log('2');
                            }
                            if (result[1] == 1) {
                                document.getElementById('whiteKing').closest('.square').classList.add('whitecheck');
                                console.log('3');
                            }
                            else {
                                remove_class('whitecheck'); 
                                console.log('4');
                            }
                        }
                    }
                )
            }

        </script>

    </head>

    <body style="background-color: #595042; padding: 10px 10px 10px 10px;">
        

        <div class="left_right">

            <div id="bar" style="background-color: #fff; margin: 60px 10px 60px 0;">
                <div class="eval_bar">0.3</div>
            </div>

            <div style="display: inline-grid;justify-content: center;">
                
                <apex:outputPanel id="blacklist" style="display: inline-flex;border-top: 3px solid black;">
                    <div class="picture">♚</div>
                    <div>
                    <div style=" font-size: 24px;font-weight: bold;">Black</div>
                    <div style="display: inline-flex;font-size: 22px;">
                        <apex:repeat value="{!blacklist}" var="xxx">
                            <div>{!xxx}</div>
                        </apex:repeat>
                    </div>
                    </div>
                </apex:outputPanel>

                <apex:outputPanel id="chessBoardPanel" style="border: 11px solid #040202db;">

                    <div class="makeboard">
                        <div id="up" class="up">
                            <apex:repeat value="{!list_to_iterate}" var="x">
                                <div class="box">{!IF(x == 0, 'A', IF(x == 1, 'B', IF(x == 2, 'C', IF(x == 3, 'D', IF(x == 4, 'E', IF(x == 5, 'F', IF(x == 6, 'G',
                                    IF(x == 7, 'H', ''))))))))}</div>
                            </apex:repeat>
                        </div>

                        <div id="left" class="left">
                            <apex:repeat value="{!list_to_iterate}" var="x">
                                <div class="box">{!8-x}</div>
                            </apex:repeat>
                        </div>

                        <apex:outputPanel id="chessBoard">
                            <div  class="chessBoard">
                                <apex:variable value="{!0}" var="counter_x" />
                                <apex:repeat value="{!board}" var="row"> 
                                    <apex:variable value="{!0}" var="counter_y" />
                                    <apex:repeat value="{!row}" var="cell">
                                        <!-- <div>{!counter_x}</div> -->
                                        <div id="{!counter_x}_{!counter_y}_square" class="square {!IF(MOD(counter_x, 2)+MOD(counter_y,2) != 1, 'white', 'black')}" onclick="box_onclick(event)" ondrop="drop(event)" ondragover="allowDrop(event)" data-x="{!counter_x}" data-y="{!counter_y}">
                                                <!-- <p style="font-size:35%;"> -->
                                                    <!-- {!counter_x}, {!counter_y} -->
                                                    <!-- {!board[counter_x][counter_y]} -->
                                                <!-- </p> -->
                                                <c:chessPiece pieceValue="{!cell}" unique="{!counter_x}{!counter_y}" />
                                        </div>
                                        <apex:variable value="{!counter_y + 1}" var="counter_y" />
                                    </apex:repeat>
                                    <apex:variable value="{!counter_x + 1}" var="counter_x" />
                                </apex:repeat>
                            </div>
                        </apex:outputPanel>

                        <div id="right" class="right">
                            <apex:repeat value="{!list_to_iterate}" var="x">
                                <div class="box">{!8-x}</div>
                            </apex:repeat>
                        </div>

                        <div id="down" class="down">
                            <apex:repeat value="{!list_to_iterate}" var="x">
                                <div class="box">{!IF(x == 0, 'A', IF(x == 1, 'B', IF(x == 2, 'C', IF(x == 3, 'D', IF(x == 4, 'E', IF(x == 5, 'F', IF(x == 6, 'G',
                                    IF(x ==7, 'H', ''))))))))}</div>
                            </apex:repeat>
                        </div>
                    </div>

                </apex:outputPanel>

                <apex:outputPanel id="whitelist" style="display: inline-flex;border-bottom: 3px solid black;align-items: flex-end;">
                    <div class="picture">♔</div>
                    <div>
                        <div style="display: inline-flex;font-size: 22px;">
                            <apex:repeat value="{!whitelist}" var="xxx">
                                <div>{!xxx}</div>
                            </apex:repeat>
                        </div>
                        <div style=" font-size: 24px;font-weight: bold;">
                            White</div>
                    </div>
                </apex:outputPanel>
            </div>

            <div class="right_panel">
                <div class="controls">
                    <!-- <apex:form> -->
                        <input type="checkbox" id="switch" checked="checked" />
                        <label for="switch">
                            <div>CPU</div>
                            <div>1V1</div>
                        </label>
                        <input type="hidden" id="switchValue" value="1" />

                        <input type="checkbox" id="switch2" checked="checked" />
                        <label for="switch2">
                            <div>WHITE</div>
                            <div>BLACK</div>
                        </label>
                        <input type="hidden" id="colorValue" value="1" />
                    <!-- </apex:form> -->
                </div>

                <div class="options">
                    <apex:form>
                        <apex:actionFunction name="rerenderchessBoardPanel" action="{!initialize_board}" rerender="chessBoard" oncomplete="check_for_check()"
                        />
                        <apex:actionFunction name="rerendermovesPanel" action="{!initialize_board_moves}" rerender="blacklist, whitelist,chessMoves"
                        />
                        <!-- <apex:commandButton value="Update Board" action="{!initialize_board}" reRender="chessBoard" /> -->
                        <apex:commandButton value="Start New Game" action="{!setnewboard}" reRender="chessBoard,blacklist, whitelist,chessMoves"
                        />
                        <apex:commandButton value="Undo" oncomplete="back()" />
                        <apex:commandButton value="Share" />
                        <apex:commandButton value="Hint" />
                    </apex:form>
                </div>

                <div class="chess_move">
                    <apex:outputPanel id="chessMoves">
                        <div class="move_grid">
                            <apex:repeat value="{!chess_moves}" var="row">
                                <!-- <div> -->
                                <apex:outputPanel rendered="{!MOD(row.row__c,2)==1}">
                                    <div class="move_grid_text">{!(row.row__c+1) / 2}.</div>
                                </apex:outputPanel>
                                <div class="move_grid_text">{!row.text__c}</div>
                                <!-- </div> -->
                            </apex:repeat>
                        </div>
                    </apex:outputPanel>
                </div>
            </div>
            
        </div>



        

        <script>
            const checkbox = document.getElementById('switch');
            const switchValue = document.getElementById('switchValue');

            function updateValue() {
                switchValue.value = checkbox.checked ? '1' : '0';
                console.log('Switch value:', switchValue.value);
            }

            checkbox.addEventListener('change', updateValue);
            updateValue();

            document.addEventListener('DOMContentLoaded', function () {
                    check_for_check();
                }, false);
        </script>
    </body>

</apex:page>