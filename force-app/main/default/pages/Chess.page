<apex:page controller="Chess" setup="false"  showQuickActionVfHeader="false" showHeader="false" sidebar="false">

    <audio id="moveSound" src="{!URLFOR($Resource.moveSound)}" preload="auto"></audio>

    <head>
        <style>
            :root {
              --n: 60px;
              --m: 35px;
            }

            .left_right{
                display: inline-grid;
                grid-template: 'bar_container WholeBoard right_panel';
                justify-content: center;
                align-items: center;
            }

            @media (orientation: portrait) {
                .left_right{
                    display: inline-grid;
                    grid-template: 'bar_container WholeBoard''. right_panel' !important;
                    justify-content: center;
                    align-items: center;
                }
                /* document.getElementsByClassName('move_grid')[0].style.width='550px';
                    document.getElementsByClassName('right_panel')[0].style.gridTemplateAreas ='"controls"  "options""chess_move"'; */
                .move_grid{
                    width: 580px !important;
                }
                .right_panel{
                    width: -webkit-fill-available;
                    grid-template:
                    "controls options"
                    "slider slider"
                    "chess_move chess_move" !important;
                    margin: 10px 0px 0px 0px !important;
                    align-content: center !important;
                }
            }
            
            .chessBoard {
                /* width: calc(var(--n)*9);
                height: calc(var(--n)*9); */
                display: inline-grid;
                grid-template-columns: repeat(8, 1fr);
                border: 4px solid black;
                align-items: center;
            }

            .square {
                width: var(--n);
                height: var(--n);
                display: flex;
                justify-content: center;
                align-items: center;
                font-size: 4em; /* Adjust size of chess pieces */
                border: 2px solid black;
            }
            
            .piece {
                user-select: none; /* Prevents text selection */
                display: flex;
                width: var(--n);
                height: var(--n);
                justify-content: center;
                align-items: center;
                font-size: larger;
            }

            .makeboard {
                transition: transform .1s linear;
                position: relative;
                border: 11px solid #040202db;
                box-shadow: 0px 0px 10px 6px rgb(0 0 0);
                display: inline-grid;
                grid-template-areas: "up up up"
                                        "left box right"
                                        "down down down";
            }
            
            .up, .down, .left, .right{
                background: radial-gradient(circle at 50% 100%, #260e0e80 5%, #260e0e 5% 10%, #260e0e80 10% 15%, #260e0e 15% 20%, #260e0e80 20% 25%, #260e0e 25% 30%, #260e0e80 30% 35%, #260e0e 35% 40%, transparent 40%), radial-gradient(circle at 100% 50%, #260e0e80 5%, #260e0e 5% 10%, #260e0e80 10% 15%, #260e0e 15% 20%, #260e0e80 20% 25%, #260e0e 25% 30%, #260e0e80 30% 35%, #260e0e 35% 40%, transparent 40%), radial-gradient(circle at 50% 0%, #260e0e80 5%, #260e0e 5% 10%, #260e0e80 10% 15%, #260e0e 15% 20%, #260e0e80 20% 25%, #260e0e 25% 30%, #260e0e80 30% 35%, #260e0e 35% 40%, transparent 40%), radial-gradient(circle at 0 50%, #260e0e80 5%, #260e0e 5% 10%, #260e0e80 10% 15%, #260e0e 15% 20%, #260e0e80 20% 25%, #260e0e 25% 30%, #260e0e80 30% 35%, #260e0e 35% 40%, transparent 40%);
                background-size: 3em 3em;
                background-color: #824f4f;
                opacity: 1;
                background-position: -0.4% 19%;
            }

            .up, .down {
                /* width: var(--m); */
                /* height: var(--m); */
                display: flex;
                padding-left: var(--m);
                padding-right: var(--m);
                justify-content: space-around;;
            }

            .left, .right{
                /* width: var(--m); */
                /* height: var(--m); */
                display: flex;
                justify-content: space-around;
                flex-direction: column;
            }

            .up{
                grid-area: up;
            }
            .down{
                grid-area: down;
            }
            .left{
                grid-area: left;
            }
            .right{
                grid-area: right;
            }

            .box{
                /* border: 2px solid black; */
                width: var(--m);
                height: var(--m);
                display: flex;
                align-items: center;
                justify-content: center;
                /* background-color: white; */
                color: white;
                font-size: 1.5em;
            }

            .blackcheck, .whitecheck{
                background-color: orangered !important;
            }

            .white {
                background-color: #c5c5c5;
            }

            .black {
                background-color: #242424;
            }

            .white_piece{
                color: white;
                text-shadow: 0px 0px 10px #000000, 0px 0px 10px #ffffff;
            }

            .black_piece{
                color: black;
                text-shadow: 0px 0px 5px #ffffff, 0px 0px 10px #000000;
            }

            .target, .avail, .enemy, .hint_color{
                box-shadow: inset 0px 0px 20px 3px rgb(0 0 0 / 60%);
            }

            .white.target{
                background-color: rgb(255 217 66);
            }

            .black.target{
                background-color: rgb(107 85 0);
            }

            .white.avail{
                background-color: color(srgb 0.41 1 0.41);
            }

            .black.avail{
                background-color: color(srgb 0 0.6 0.01);
            }

            .white.enemy{
                background-color: rgb(255 29 78);
            }

            .black.enemy{
                background-color: rgb(128 0 28);
            }

            .white.hint_color{
                background-color: #71fff3;
            }

            .black.hint_color{
                background-color: #008176;
            }
            
            .avail_2nd{
                background-color: darkcyan;
            }

            .move_grid{
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                grid-template-rows: repeat(32, 1fr);
                width: 300px;
                padding-left: 8px;
                overflow-x: auto;
                height: 92%;
                margin-top: 27px;
                margin-right: 10px;
            }
            .move_grid_text{
                height: 25px;
            }

            .picture{
                    width: 58px;
                    height: 58px;
                    font-size: 52px;
                    text-align: center;
            }

            input[type=checkbox] {
                height: 0;
                width: 0;
                visibility: hidden;
                display: none;
            }

            label {
                cursor: pointer;
                /* text-indent: -9999px; */
                width: 100px;
                height: 50px;
                background: #00966f;
                display: flex;
                /* border-radius: 100px; */
                position: relative;
                justify-content: space-around;
                align-items: center;
                margin: 4px 4px 4px 5px;
                box-shadow: inset 0px 0px 10px 3px rgb(0 0 0 / 60%);
                font-weight: bold;
            }

            label:after {
                content: '';
                position: absolute;
                top: 7%;
                left: calc(100% - 5px);
                width: 42%;
                height: 80%;
                background: #4c473e;
                /* border-radius: 90px; */
                transform: translateX(-100%);
                transition: 0.3s;
                transition-timing-function: ease-in-out;
                margin: 2px 2px 2px 0px;
                box-shadow: 0px 0px 20px 0px rgb(0 0 0 / 60%);
            }

            input:checked + label {
                background: #00966f;
            }

            input:checked + label:after {
                left: calc(100% - 5px);
                transform: translateX(-100%);
            }

            input:not(:checked) + label {
                background: #a97f62;
            }

            input:not(:checked) + label:after {
                left: 5px;
                transform: translateX(0);
            }

            label:active:after {
                width: 130px;
            }

            body {
                display: flex;
                justify-content: center;
                align-items: center;
                /* height: 100vh; */
            }

            .bar_container{
                height: 600px;
                background-color: #d7d7d7;; margin: 65px 10px 65px 5px;
                box-shadow: 0px 0px 8px 4px rgb(0 0 0 / 60%);
                grid-area: bar_container;
            }

            .eval_bar {
                display: flex;
                align-items: flex-end;
                justify-content: center;
                /* padding-top: 10px;
                padding-bottom: 10px; */
                height: 48%;
                width: 25px;
                background-color: #000000;
                transition-property: height;
                transition-duration: 0.7s;
                transition-timing-function: ease-in-out;
                border-left: 1px solid black;
                border-right: 1px solid black;
            }

            .eval_bar_text{
                position: relative;
                bottom: -15px;
                color: black;
                transition: bottom 0.3s ease;
            }

            .eval_bar_text.eval_bar_text_up{
                position: relative;
                color: white;
                bottom: 3px;
            }


            .right_panel{
                margin: 0px 5px 0px 5px;
                grid-area: right_panel;
                height: 100%;
                display: inline-grid;
                grid-template-areas:
                    "controls"
                    "slider"
                    "chess_move"
                    "options";
                align-content: space-between;
            }

            .controls{
                display: inline-flex;
                grid-area: controls;
                justify-content: space-evenly;
                align-items: center;
                box-shadow: 0px 0px 8px 4px rgb(0 0 0 / 60%);
                margin: 2px 5px 2px 5px;
                background-color: #3d372d;
                height: 70px;
            }

            .options{
                display: flex;
                grid-area: options;
                box-shadow: 0px 0px 8px 4px rgb(0 0 0 / 60%);
                margin: 2px 5px 2px 5px;
                height: 70px;
                align-items: center;
                justify-content: space-around;
                background-color: #3d372d;
            }

            .chess_move{
                grid-area: chess_move;
                box-shadow: 0px 0px 8px 4px rgb(0 0 0 / 60%);
                margin: 5px 5px 5px 5px;
                height: 510px;
                display: flex;
                background: linear-gradient(to bottom, #ffffff8a 23px, #ff4c4c 23px, transparent 28px), linear-gradient(to right, transparent 26px, #ff4c4c 26px, #ff4c4c 28px, transparent 27px), linear-gradient(to right, transparent 30px, #ff4c4c 30px, #ff4c4c 31px, transparent 32px), repeating-linear-gradient(to bottom, #b9b5b4, #898785 23px, #015fce8f 23px, #cacacac4 25px);
                /* border: 1px solid #302e2e; */
                /* box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); */
                /* color: white; */
                font-weight: bold;
                font-size: small;
            }

            .blacklist{
                border-top: 3px solid black;
                box-shadow: 0px 0px 11px 3px rgb(0 0 0 / 59%);
                margin: 1px 1px 4px 1px;
                background-color: #adaaa87a;
            }

            .whitelist{
                border-bottom: 3px solid black;
                box-shadow: 0px 0px 11px 3px rgb(0 0 0 / 59%);
                margin: 4px 1px 1px 1px;
                background-color: #adaaa87a;
                color: whitesmoke;
            }

            .svg-bg-button.svg-bg-button{
                width: 40px; /* Adjust width */
                height: 40px; /* Adjust height */
                /* background:#0000006e !important; */
                background-color: #0000006e;
                background-repeat: no-repeat;
                background-position: center;
                background-size: 30px 30px; /* Adjust size */
                border: none;
                cursor: pointer;
                margin: 4px 4px 4px 5px;
                box-shadow: 0px 0px 6px 2px rgb(0 0 0 / 60%);
            }

            .svg-bg-button:hover {
                background-color: #ffffff24; /* Change background on hover */
                background-position: center !important;
            }

            .start_new_game{
                background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'%3E%3Cpath fill='white' d='M12 4c2.1 0 4.1.8 5.6 2.3c3.1 3.1 3.1 8.2 0 11.3c-1.8 1.9-4.3 2.6-6.7 2.3l.5-2c1.7.2 3.5-.4 4.8-1.7c2.3-2.3 2.3-6.1 0-8.5C15.1 6.6 13.5 6 12 6v4.6l-5-5l5-5zM6.3 17.6C3.7 15 3.3 11 5.1 7.9l1.5 1.5c-1.1 2.2-.7 5 1.2 6.8q.75.75 1.8 1.2l-.6 2q-1.5-.6-2.7-1.8'/%3E%3C/svg%3E") !important;
            }

            .undo{
                background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'%3E%3Cpath fill='white' d='M7 19v-2h7.1q1.575 0 2.738-1T18 13.5T16.838 11T14.1 10H7.8l2.6 2.6L9 14L4 9l5-5l1.4 1.4L7.8 8h6.3q2.425 0 4.163 1.575T20 13.5t-1.737 3.925T14.1 19z'/%3E%3C/svg%3E") !important;
            }

            .share{
                background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'%3E%3Cpath fill='white' d='M17 22q-1.25 0-2.125-.875T14 19q0-.15.075-.7L7.05 14.2q-.4.375-.925.588T5 15q-1.25 0-2.125-.875T2 12t.875-2.125T5 9q.6 0 1.125.213t.925.587l7.025-4.1q-.05-.175-.062-.337T14 5q0-1.25.875-2.125T17 2t2.125.875T20 5t-.875 2.125T17 8q-.6 0-1.125-.213T14.95 7.2l-7.025 4.1q.05.175.063.338T8 12t-.012.363t-.063.337l7.025 4.1q.4-.375.925-.587T17 16q1.25 0 2.125.875T20 19t-.875 2.125T17 22'/%3E%3C/svg%3E");
            }

            .hint{
                background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'%3E%3Cg fill='none' stroke='white' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5'%3E%3Cpath d='M17.252 12.49c-.284 2.365-1.833 3.31-2.502 3.996c-.67.688-.55.825-.505 1.834a.916.916 0 0 1-.916.971h-2.658a.92.92 0 0 1-.917-.971c0-.99.092-1.22-.504-1.834c-.76-.76-2.548-1.833-2.548-4.784a5.307 5.307 0 1 1 10.55.788'/%3E%3Cpath d='M10.46 19.236v1.512c0 .413.23.752.513.752h2.053c.285 0 .514-.34.514-.752v-1.512m-2.32-10.54a2.227 2.227 0 0 0-2.226 2.227m10.338.981h1.834m-3.68-6.012l1.301-1.301M18.486 17l1.301 1.3M12 2.377V3.86m-6.76.73l1.292 1.302M4.24 18.3L5.532 17m-.864-5.096H2.835'/%3E%3C/g%3E%3C/svg%3E");
            }

            .next{
                background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'%3E%3Cg fill='none' stroke='white' stroke-linecap='round' stroke-linejoin='round' stroke-width='2'%3E%3Cpath d='m15 17l5-5l-5-5'/%3E%3Cpath d='M4 18v-2a4 4 0 0 1 4-4h12'/%3E%3C/g%3E%3C/svg%3E");
            }

            .new_window{
                background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'%3E%3Cpath fill='white' d='M5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h7v2H5v14h14v-7h2v7q0 .825-.587 1.413T19 21zm4.7-5.3l-1.4-1.4L17.6 5H14V3h7v7h-2V6.4z'/%3E%3C/svg%3E");
            }

            .overlay-message {
                visibility: hidden; /* Initially hidden */
                position: fixed; /* Fixed position */
                bottom: 20px; /* 20px from the bottom */
                left: 20px; /* 20px from the left */
                background-color: #4CAF50; /* Green background */
                color: white; /* White text */
                padding: 15px 25px; /* Padding */
                border-radius: 8px; /* Rounded corners */
                box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); /* Shadow for popup effect */
                z-index: 1000; /* High z-index to appear on top */
                font-size: 16px; /* Font size */
                transition: visibility 0s, opacity 0.5s linear; /* Fade-in and fade-out effect */
                opacity: 0; /* Initial opacity */
            }
            
            .overlay-message.show {
                visibility: visible; /* Make it visible */
                opacity: 1; /* Set opacity to 1 */
            }

            .disabled-button {
                pointer-events: none; /* Disable click events */
                opacity: 0.5; /* Make it look visually disabled */
            }

            /* Styling for the big box */

            .big-box {
                width: 50px; /* Size of the big box */
                height: 50px;
                border: 2px solid black;
                display: flex;
                align-items: center;
                justify-content: center;
                position: relative;
                overflow: hidden;
                box-shadow: 0px 0px 10px 3px rgb(0 0 0 / 60%);
            }

            /* Styling for the small square */
            .small-square {
                width: 90%;
                height: 90%;
                background-color: white;
                transition: transform .1s linear , background-color 2s ease-in-out; /* Smooth rotation and color transition */
                position: absolute;
                transform-origin: center; /* Ensure scaling happens from the center */
                box-shadow: inset 0px 0px 10px 3px rgb(0 0 0 / 60%);
            }

            .rotate_this{
                rotate: 180deg;
            }

            .flip_board{
                width: 50px;
                height: 50px;
                background-color: #0000004f;
                background-repeat: no-repeat;
                background-position: center;
                background-size: 30px 30px;
                border: none;
                cursor: pointer;
                background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'%3E%3Cpath fill='black' d='M21 13H3a1 1 0 0 1 0-2h18a1 1 0 0 1 0 2' opacity='0.8'/%3E%3Cpath fill='black' d='m12 21l5-5H7z'/%3E%3Cpath fill='black' d='M12 22a1 1 0 0 1-.707-.293l-5-5A1 1 0 0 1 7 15h10a1 1 0 0 1 .707 1.707l-5 5A1 1 0 0 1 12 22m-2.586-5L12 19.586L14.586 17Z'/%3E%3Cpath fill='black' d='M12 4a.99.99 0 0 1-.92-1.38a1 1 0 0 1 .21-.33a1 1 0 0 1 1.09-.21a1 1 0 0 1 .33.21A1.05 1.05 0 0 1 13 3a.84.84 0 0 1-.08.38a1.2 1.2 0 0 1-.21.33A1 1 0 0 1 12 4M8.79 6.21a1.01 1.01 0 0 1 0-1.42a1.007 1.007 0 0 1 1.42 0a1.01 1.01 0 0 1 0 1.42a1.03 1.03 0 0 1-.71.29a1.03 1.03 0 0 1-.71-.29M7 9a.99.99 0 0 1-1-1a1 1 0 0 1 1.71-.71A1.05 1.05 0 0 1 8 8a.99.99 0 0 1-1 1m5.67-1a.997.997 0 0 1 1-1a1.003 1.003 0 0 1 1 1a1.003 1.003 0 0 1-1 1a.997.997 0 0 1-1-1M9.33 8a1.003 1.003 0 0 1 1-1a.997.997 0 0 1 1 1a.997.997 0 0 1-1 1a1.003 1.003 0 0 1-1-1M17 9a.99.99 0 0 1-1-1a1 1 0 1 1 2 0a.99.99 0 0 1-1 1m-3.21-2.79a1.01 1.01 0 0 1 0-1.42a1.007 1.007 0 0 1 1.42 0a1.01 1.01 0 0 1 0 1.42a1.03 1.03 0 0 1-.71.29a1.03 1.03 0 0 1-.71-.29' opacity='0.6'/%3E%3C/svg%3E");
                position: relative;
            }

            .flip_board_White{
                background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'%3E%3Cpath fill='white' d='M21 13H3a1 1 0 0 1 0-2h18a1 1 0 0 1 0 2' opacity='0.8'/%3E%3Cpath fill='white' d='m12 21l5-5H7z'/%3E%3Cpath fill='white' d='M12 22a1 1 0 0 1-.707-.293l-5-5A1 1 0 0 1 7 15h10a1 1 0 0 1 .707 1.707l-5 5A1 1 0 0 1 12 22m-2.586-5L12 19.586L14.586 17Z'/%3E%3Cpath fill='white' d='M12 4a.99.99 0 0 1-.92-1.38a1 1 0 0 1 .21-.33a1 1 0 0 1 1.09-.21a1 1 0 0 1 .33.21A1.05 1.05 0 0 1 13 3a.84.84 0 0 1-.08.38a1.2 1.2 0 0 1-.21.33A1 1 0 0 1 12 4M8.79 6.21a1.01 1.01 0 0 1 0-1.42a1.007 1.007 0 0 1 1.42 0a1.01 1.01 0 0 1 0 1.42a1.03 1.03 0 0 1-.71.29a1.03 1.03 0 0 1-.71-.29M7 9a.99.99 0 0 1-1-1a1 1 0 0 1 1.71-.71A1.05 1.05 0 0 1 8 8a.99.99 0 0 1-1 1m5.67-1a.997.997 0 0 1 1-1a1.003 1.003 0 0 1 1 1a1.003 1.003 0 0 1-1 1a.997.997 0 0 1-1-1M9.33 8a1.003 1.003 0 0 1 1-1a.997.997 0 0 1 1 1a.997.997 0 0 1-1 1a1.003 1.003 0 0 1-1-1M17 9a.99.99 0 0 1-1-1a1 1 0 1 1 2 0a.99.99 0 0 1-1 1m-3.21-2.79a1.01 1.01 0 0 1 0-1.42a1.007 1.007 0 0 1 1.42 0a1.01 1.01 0 0 1 0 1.42a1.03 1.03 0 0 1-.71.29a1.03 1.03 0 0 1-.71-.29' opacity='0.6'/%3E%3C/svg%3E") !important;
            }

            .stuff {
                padding: 50px;
                max-width: 900px;
                margin: auto;
            }

            .horizontal-slider {
                width: 70%;
                height: 60%;
                position: relative;
                overflow: hidden;
            }

            .slider-track {
                display: flex;
                width: 100%;
                height: 100%;
                align-items: center;
                position: relative;
                justify-content: space-around;
            }

            .slider-track .bar {
                width: 2%;
                height: 70%;
                background-color: gray;
                transition: background-color 0.5s, height 0.3s, width 0.3s;
                border: 2px red;
                border-radius: 8px;
            }

            .slider-track .bar.active {
                background-color: #b80202;
                height: 90%;
                width: 3%;
            }

            .slider-track .bar.selected {
                height: 100%;
                background-color: #c60000;
                width: 3.5%;
            }

            .slider{
                display: inline-flex;
                grid-area: slider;
                justify-content: space-evenly;
                align-items: center;
                box-shadow: 0px 0px 5px 4px rgb(0 0 0 / 60%);
                margin: 2px 5px 2px 5px;
                background-color: #2b2720;
                height: 55px;
            }



        </style>
        <script>
            
            function playMoveSound() {
                const moveSound = document.getElementById('moveSound');
                moveSound.volume = 0.7;
                moveSound.play();
            }

            function remove_class(str){
                var elems = document.querySelectorAll('.'+str);

                [].forEach.call(elems, function (el) {
                    el.classList.remove(str);
                });
            }

            function box_onclick(event){
                // console.log("onclick    "+event.target.id);
                if (event.target.classList.contains('piece')) {
                    toSquare = event.target.closest('.square');
                }
                else
                {
                    toSquare=event.target;
                }

                if (toSquare.classList.contains('target')) {
                    remove_class('avail');
                    remove_class('target');
                    remove_class('enemy');
                    remove_class('avail_2nd');

                    chech_previous_moves();
                    return;
                }

                // console.log(toSquare.id);
                // console.log(toSquare.querySelector('.piece'));

                if (toSquare.classList.contains('avail') && document.querySelectorAll('.target').length==1) {
                    call_move(document.querySelectorAll('.target')[0].querySelector('.piece').id, toSquare.id);
                }
                else
                {
                    if(toSquare.querySelector('.piece')!=null)
                    {
                        put_color(toSquare.id);
                        // console.log('put color');
                    }
                    else
                    {
                        remove_class('avail');
                        remove_class('target');
                        remove_class('enemy');
                        remove_class('avail_2nd');

                        chech_previous_moves();
                    }
                }
                
            }

            function call_move(data,target)
            {
                console.log("call_move  "+data,target);
                var piece = document.getElementById(data);
                var fromSquare = piece.closest('.square'); //parent div
                if (event.target.classList.contains('piece')) {
                    toSquare = event.target.closest('.square');
                }
                else
                {
                    var toSquare = document.getElementById(target);
                }

                // Check if the event.target is the piece or the square
                if (toSquare.querySelector('.piece') != null) {
                    toSquare.querySelector('.piece').remove(); //remove old piece
                }

                toSquare.appendChild(document.getElementById(data));

                var fromX = fromSquare.getAttribute('data-x');
                var fromY = fromSquare.getAttribute('data-y');
                var toX = toSquare.getAttribute('data-x');
                var toY = toSquare.getAttribute('data-y');

                remove_class('avail');
                remove_class('target');
                remove_class('enemy');
                remove_class('hint_color');

                // console.log('drop now updateBoard ' + fromX + ',' + fromY + ',' + ',' + toX + ',' + toY);

                // console.log("Chess.updateBoard("+parseInt(fromX)+','+parseInt(fromY)+','+parseInt(toX)+','+parseInt(toY)+','+parseInt(colorValue.value)+");");
                // Update the board using JavaScript Remoting
                Chess.updateBoard(
                    parseInt(fromX),
                    parseInt(fromY),
                    parseInt(toX),
                    parseInt(toY),
                    parseInt(colorValue.value),
                    function (result, ev) {
                        if (ev.status) {
                            // console.log(ev.status);
                            console.log('call_move_done '+result);
                            // console.log(result[0],result[1]);
                            if (result == 'need to update') {
                                messageElement.textContent = 'Invalid Move or Color Selected';
                                messageElement.style.backgroundColor = 'red';
                                messageElement.classList.add('show');
                                // Hide message after 2 seconds
                                setTimeout(() => {
                                    messageElement.style.backgroundColor = '';
                                    messageElement.classList.remove('show');
                                }, 4000);

                                rerenderchessBoardPanel();
                            }
                            else
                            {
                                label_for_switch2.click();
                                rerendermovesPanel();
                                playMoveSound();
                                if (result[0]==1) {
                                    document.getElementById('blackking').closest('.square').classList.add('blackcheck');
                                    // console.log('1');
                                }
                                else
                                {
                                    remove_class('blackcheck');
                                    // console.log('2');
                                }
                                if (result[1]==1) {
                                    document.getElementById('whiteKing').closest('.square').classList.add('whitecheck');
                                    // console.log('3');
                                }
                                else
                                {
                                    remove_class('whitecheck');
                                    // console.log('4');
                                }

                                document.querySelector("div.chessBoard div[data-x='"+fromX+"'][data-y='"+fromY+"']").classList.add('target');
                                document.querySelector("div.chessBoard div[data-x='" + toX + "'][data-y='" + toY + "']").classList.add('target');

                                
                                fen_str=result.substr(3);

                                        sendMessageWS(fen_str);

                                        if (document.getElementById('switchValue').value == 1) {
                                            postChessApi({ fen: fen_str }).then((data) => {
                                                console.log(data);

                                                fromX = (8 - data.fromNumeric % 10);
                                                fromY = (Math.floor(data.fromNumeric / 10) - 1);
                                                toX = (8 - data.toNumeric % 10);
                                                toY = (Math.floor(data.toNumeric / 10) - 1);

                                                console.log('from ' + fromX + ' ' + fromY,'to ' + toX + ' ' + toY);
                                                Chess.updateBoard(
                                                    fromX,
                                                    fromY,
                                                    toX,
                                                    toY,
                                                    parseInt(colorValue.value),
                                                    function (result, ev) {
                                                        if (ev.status) {
                                                            // console.log(ev.status);
                                                            console.log('call_CPU_move_done ' + result);
                                                            // console.log(result[0], result[1]);

                                                            rerendermovesPanel();
                                                            rerenderchessBoardPanel();

                                                            setTimeout(function () {
                                                                
                                                                label_for_switch2.click();
                                                                playMoveSound();
                                                                console.log('done CPU move');

                                                                remove_class('target');

                                                                document.querySelector("div.chessBoard div[data-x='" + fromX + "'][data-y='" + fromY + "']").classList.add('target');
                                                                document.querySelector("div.chessBoard div[data-x='" + toX + "'][data-y='" + toY + "']").classList.add('target');

                                                                sendMessageWS(result.substr(3));

                                                            }, 500);
                                                        }
                                                    }
                                                )
                                            });
                                        }
                                
                            }
                        }
                    }
                )
            }

            function put_color(toSquare){
                // console.log(toSquare);
                var pos = document.getElementById(toSquare);

                // if (pos.classList.contains('piece')) {
                //     pos = event.target.closest('.square');
                // }

                var X = pos.getAttribute('data-x');
                var Y = pos.getAttribute('data-y');
                    // console.log(parseInt(X),parseInt(Y));
                Chess.updateAvailable(
                    parseInt(X),
                    parseInt(Y),
                    function (result, ev) {
                        if (ev.status) {
                            // console.log(ev.status);
                            // console.log(result);

                            remove_class('avail');
                            remove_class('target');
                            remove_class('enemy');
                            remove_class('avail_2nd');

                            pos.classList.add('target');
                            if(result.list_z.length>0)
                            {
                                result.list_z.forEach(element => {
                                    document.getElementById(element.x + '_' + element.y + '_square').classList.add('avail_2nd');
                                });
                            }
                            if(result.list_x.length>0)
                            {
                                result.list_x.forEach(element => {
                                    document.getElementById(element.x + '_' + element.y + '_square').classList.add('avail');
                                });
                            }
                            if (result.list_y.length > 0) {
                                result.list_y.forEach(element => {
                                    document.getElementById(element.x + '_' + element.y + '_square').classList.add('enemy');
                                });
                            }
                        }
                    }
                );
            }

            function allowDrop(event) {
                event.preventDefault();
            }

            function drag(event) {
                // put_color(event.target.closest('.square').id);
                event.dataTransfer.setData("text", event.target.id);

                const target = event.target;

                // Create a custom drag image element
                const dragImage = document.createElement('div'); // Create a new div element
                dragImage.innerHTML = target.innerHTML; // Copy the inner content (like the chess piece character)

                // Get all computed styles from the original target
                const computedStyle = window.getComputedStyle(target);

                // Copy most of the styles from the original target to the drag image
                Array.from(computedStyle).forEach((key) => {
                    dragImage.style[key] = computedStyle[key];
                });

                // // Override specific styles for the drag image
                // dragImage.style.width = '60px'; // Set width to 60px
                // dragImage.style.height = '60px'; // Set height to 60px
                // dragImage.style.display = 'flex'; // Use flexbox to center content
                // dragImage.style.alignItems = 'center'; // Center content vertically
                // dragImage.style.justifyContent = 'center'; // Center content horizontally
                dragImage.style.backgroundColor = 'transparent'; // Transparent background
                // dragImage.style.border = 'none'; // Remove any borders
                // dragImage.style.opacity = '0.5'; // Make it semi-transparent (optional)
                dragImage.style.position = 'absolute'; // Position it properly
                dragImage.style.top = '-1000px'; // Move it off-screen (important for some browsers)

                // Append it to the body temporarily
                document.body.appendChild(dragImage);

                // Use the created element as the drag image
                event.dataTransfer.setDragImage(dragImage, 30, 30); // Center the image at the pointer

                // Clean up: Remove the custom element after a short delay
                setTimeout(() => document.body.removeChild(dragImage), 0);
            }

            function drop(event) {
                event.preventDefault();

                var data = event.dataTransfer.getData("text");

                console.log("drop   " +data, event.target.id);

                if(event.target.id==data)
                {
                    return;
                }

                call_move(data, event.target.id);
            }

            var isRequestInProgress = false;
            
            function back() {
                if (isRequestInProgress) {
                    return; // Exit if there is already an ongoing request
                }

                // Set the flag to indicate a request is in progress
                isRequestInProgress = true;

                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.Chess.back_back}', 
                    function (result, event) {
                        if (event.status && result=='done') {
                            playMoveSound();
                            label_for_switch2.click();
                            rerenderchessBoardPanel(); 
                            rerendermovesPanel(); 

                            if(switchValue.value == 1)
                            {
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.Chess.back_back}',
                                    function (result, event) {
                                        isRequestInProgress = false;
                                        if (event.status && result == 'done') {
                                            playMoveSound();
                                            label_for_switch2.click();
                                            rerenderchessBoardPanel();
                                            rerendermovesPanel();

                                            Chess.share_fen(
                                                function (result, ev) {
                                                    console.log('back fen ', result);
                                                    sendMessageWS(result);

                                                    chech_previous_moves();
                                                })

                                        } else {
                                            console.log('Error: ' + event.message);
                                            isRequestInProgress = false;
                                        }
                                    }
                                );
                            }
                            else
                            {
                                isRequestInProgress = false;
                                Chess.share_fen(
                                    function (result, ev) {
                                        console.log('back fen ', result);
                                        sendMessageWS(result);

                                        chech_previous_moves();
                                    })
                            }

                        } else {
                            console.log('Error: ' + event.message);
                            isRequestInProgress = false;
                        }
                    }
                );
            }

            function next() {
                if (isRequestInProgress) {
                    return; // Exit if there is already an ongoing request
                }

                // Set the flag to indicate a request is in progress
                isRequestInProgress = true;

                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.Chess.next_next}', 
                    function (result, event) {
                        if (event.status && result == 'done') {
                            playMoveSound();
                            label_for_switch2.click();
                            rerenderchessBoardPanel(); 
                            rerendermovesPanel(); 

                            if(switchValue.value == 1)
                            {
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.Chess.next_next}',
                                    function (result, event) {
                                        isRequestInProgress = false;
                                        if (event.status && result == 'done') {
                                            playMoveSound();
                                            label_for_switch2.click();
                                            rerenderchessBoardPanel();
                                            rerendermovesPanel();

                                            Chess.share_fen(
                                                function (result, ev) {
                                                    console.log('back fen ', result);
                                                    sendMessageWS(result);

                                                    chech_previous_moves();
                                                })

                                        } else {
                                            console.log('Error: ' + event.message);
                                            isRequestInProgress = false;
                                        }
                                    }
                                );
                            }
                            else
                            {
                                isRequestInProgress = false;
                                Chess.share_fen(
                                    function (result, ev) {
                                        console.log('back fen ', result);
                                        sendMessageWS(result);

                                        chech_previous_moves();
                                    })
                            }

                        } else {
                            console.log('Error: ' + event.message);
                            isRequestInProgress = false;
                        }
                    }
                );
            }

            function check_for_check(){
                if (rotation % 360 === 180) {
                    document.querySelectorAll('.square').forEach(div => {
                        div.classList.add('rotate_this');
                    });
                }
                document.querySelectorAll('.piece').forEach(div => {
                    div.classList.add('show');
                });
                check_flip_board();
                chech_previous_moves();
                Chess.check_for_check(
                    function (result, ev) {
                        if (ev.status) {
                            if (result[0] == 1) {
                                document.getElementById('blackking').closest('.square').classList.add('blackcheck');
                                // console.log('1');
                            }
                            else {
                                remove_class('blackcheck');
                                // console.log('2');
                            }
                            if (result[1] == 1) {
                                document.getElementById('whiteKing').closest('.square').classList.add('whitecheck');
                                // console.log('3');
                            }
                            else {
                                remove_class('whitecheck'); 
                                // console.log('4');
                            } 
                        }
                    }
                )
            }

            function chech_previous_moves()
            {
                Chess.chech_if_board_okay(
                    function (result, ev) {
                        if (ev.status) {
                            if(result)
                            {
                                rerenderchessBoardPanel();
                            }
                            Chess.previous_moves_data(
                                function (result, ev) {
                                    if (ev.status) {
                                        // console.log(result);
                                        if (result.length) {
                                            document.querySelector("div.chessBoard div[data-x='" + result[0].from_x__c + "'][data-y='" + result[0].from_y__c + "']").classList.add('target');
                                            document.querySelector("div.chessBoard div[data-x='" + result[0].to_x__c + "'][data-y='" + result[0].to_y__c + "']").classList.add('target');

                                            if (result[0].check__c == 10) {
                                                document.getElementById('blackking').closest('.square').classList.add('blackcheck');
                                            }
                                            if (result[0].check__c == 1) {
                                                document.getElementById('whiteKing').closest('.square').classList.add('whitecheck');
                                            }

                                            // if (result[0].color__c== colorValue.value) {
                                            //     flip_board();
                                            // }


                                        } else {

                                        }
                                    }
                                });
                        }
                    }
                )
            }

            function new_window() {
                window.open(window.location.hostname + window.location.pathname, '_blank').focus();
            }

            function share()
            {
                Chess.share_fen(
                    function (result, ev) {
                        console.log('fen ',result);
                        navigator.clipboard.writeText(result);

                        messageElement.textContent = 'Fen Copied';

                        messageElement.classList.add('show');

                        // Hide message after 2 seconds
                        setTimeout(() => {
                            messageElement.classList.remove('show');
                        }, 4000);
                    })
            }

            function hint(){
                Chess.share_fen(
                    function (result, ev) {
                        // console.log(result);
                        sendMessageWS_HINT(result);
                    })
            }

            function Set_New_Board() {
                if (rotation % 360 === 180)
                {
                    // flip_board();
                    if (colorValue.value == 1) { label_for_switch2.click() };
                }
                else
                {
                    if(colorValue.value == 0){label_for_switch2.click()};
                }
                // if (colorValue.value == 0) {
                //     rotation % 360 === 180?label_for_switch2.click():;
                // }
                check_flip_board();
                
                bar_text.innerText = '0.2';
                bar.style.height = '48%';

                bar_text.classList.remove('eval_bar_text_up');

            }

            function highlightWhitePieces() {
                // List of white chess piece Unicode characters
                elo_update();
                
                const whitePiecesRegex = /[♙♘♗♖♕♔]/g;

                // Select all elements with the class 'move_grid_text'
                const elements = document.querySelectorAll('.move_grid_text');

                elements.forEach((element) => {
                    // Replace white pieces with a span wrapping for styling
                    element.innerHTML = element.innerHTML.replace(whitePiecesRegex, (match) => {
                        return `<span style="color: white;">${match}</span>`;
                    });
                });
            }

            function adjustScaleForElement() {
                const element = document.querySelector('.left_right');

                // Check if the element exists
                if (!element) return;

                // Get the updated element dimensions
                const baseWidth = element.clientWidth + parseInt(document.body.style.paddingLeft) + parseInt(document.body.style.paddingRight) + 4;
                const baseHeight = 735 + parseInt(document.body.style.paddingTop) + parseInt(document.body.style.paddingBottom) + 3;

                // Calculate the scaling factor based on screen size
                const scaleWidth = window.innerWidth / baseWidth;
                const scaleHeight = window.innerHeight / baseHeight;
                const scaleFactor = Math.min(scaleWidth, scaleHeight);

                // Apply scaling to the element
                element.style.transform = `scale(${scaleFactor})`;
                element.style.transformOrigin = '50% 0%'; // Set the origin for scaling

                // Prevent overflow and adjust element size
                // element.style.width = `${(100 / scaleFactor) * 100}vw`;
                // element.style.height = `${(100 / scaleFactor) * 100}vh`;
            }

            


        
        </script>

    </head>

    <body style="background-color: #595042; padding: 5px 10px 5px 10px;">
        
        <div id="copyMessage" class="overlay-message">Fen copied</div>

        <div class="left_right">

            <div id="bar" class="bar_container">
                    <div class="eval_bar">
                        <div class="eval_bar_text">0.2</div>
                    </div>
            </div>

            <div style="display: inline-grid;justify-content: center;grid-area: WholeBoard;">
                    
                    <div class="blacklist">
                        <apex:outputPanel id="blacklist" style="display: inline-flex; align-items: flex-start;">
                            <div class="picture">♚</div>
                            <div>
                            <div style=" font-size: 24px;font-weight: bold;">
                                Black
                                <span style="font-size: 16px;font-weight: 600;">
                                     (
                                    <span id="black_elo"></span>
                                    )
                                </span>
                            </div>
                            <div style="display: inline-flex;font-size: 22px;">
                                <apex:repeat value="{!blacklist}" var="xxx">
                                    <div>{!xxx}</div>
                                </apex:repeat>
                            </div>
                            </div>
                        </apex:outputPanel>
                    </div>

                    <apex:outputPanel id="chessBoardPanel">

                        <div class="makeboard">
                            <div id="up" class="up">
                                <apex:repeat value="{!list_to_iterate}" var="x">
                                    <div class="box">{!IF(x == 0, 'A', IF(x == 1, 'B', IF(x == 2, 'C', IF(x == 3, 'D', IF(x == 4, 'E', IF(x == 5, 'F', IF(x == 6, 'G',
                                        IF(x == 7, 'H', ''))))))))}</div>
                                </apex:repeat>
                            </div>

                            <div id="left" class="left">
                                <apex:repeat value="{!list_to_iterate}" var="x">
                                    <div class="box">{!8-x}</div>
                                </apex:repeat>
                            </div>

                            <apex:outputPanel id="chessBoard">
                                <div  class="chessBoard">
                                    <apex:variable value="{!0}" var="counter_x" />
                                    <apex:repeat value="{!board}" var="row"> 
                                        <apex:variable value="{!0}" var="counter_y" />
                                        <apex:repeat value="{!row}" var="cell">
                                            <!-- <div>{!counter_x}</div> -->
                                            <div id="{!counter_x}_{!counter_y}_square" class="square {!IF(MOD(counter_x, 2)+MOD(counter_y,2) != 1, 'white', 'black')}" onclick="box_onclick(event)" ondrop="drop(event)" ondragover="allowDrop(event)" data-x="{!counter_x}" data-y="{!counter_y}">
                                                    <!-- <p style="font-size:35%;"> -->
                                                        <!-- {!counter_x}, {!counter_y} -->
                                                        <!-- {!board[counter_x][counter_y]} -->
                                                    <!-- </p> -->
                                                    <c:chessPiece pieceValue="{!cell}" unique="{!counter_x}{!counter_y}"/>
                                            </div>
                                            <apex:variable value="{!counter_y + 1}" var="counter_y" />
                                        </apex:repeat>
                                        <apex:variable value="{!counter_x + 1}" var="counter_x" />
                                    </apex:repeat>
                                </div>
                            </apex:outputPanel>

                            <div id="right" class="right">
                                <apex:repeat value="{!list_to_iterate}" var="x">
                                    <div class="box">{!8-x}</div>
                                </apex:repeat>
                            </div>

                            <div id="down" class="down">
                                <apex:repeat value="{!list_to_iterate}" var="x">
                                    <div class="box">{!IF(x == 0, 'A', IF(x == 1, 'B', IF(x == 2, 'C', IF(x == 3, 'D', IF(x == 4, 'E', IF(x == 5, 'F', IF(x == 6, 'G',
                                        IF(x ==7, 'H', ''))))))))}</div>
                                </apex:repeat>
                            </div>
                        </div>

                    </apex:outputPanel>

                    <div class="whitelist">
                        <apex:outputPanel id="whitelist" style="display: inline-flex; align-items: flex-start;">
                            <div class="picture">♔</div>
                            <div>
                                <div style=" font-size: 24px;font-weight: bold;">
                                    White
                                    <span style="font-size: 16px;font-weight: 600;">
                                        (
                                        <span id="white_elo"></span>
                                        )
                                    </span>
                                </div>
                                <div style="display: inline-flex;font-size: 22px;">
                                    <apex:repeat value="{!whitelist}" var="xxx">
                                        <div>{!xxx}</div>
                                    </apex:repeat>
                                </div>
                            </div>
                        </apex:outputPanel>
                    </div>
            </div>
                
            <div class="right_panel">
                <div class="controls">
                        <input type="checkbox" id="switch" checked="checked" />
                        <label for="switch">
                            <div>CPU</div>
                            <div>1V1</div>
                        </label>
                        <input type="hidden" id="switchValue" value="1" />

                        <div class="big-box" title="Flip Board">
                            <div class="small-square"></div>
                            <div class="flip_board" onclick="flip_board()"></div>
                        </div>

                        <input type="checkbox" id="switch2" checked="checked" />
                        <label for="switch2">
                            <div style=" color: white; ">WHITE</div>
                            <div>BLACK</div>
                        </label>
                        <input type="hidden" id="colorValue" value="1" />
                </div>

                <div class="options">
                    <apex:form >
                        <apex:actionFunction name="rerenderchessBoardPanel" action="{!initialize_board}" rerender="chessBoard" oncomplete="check_for_check()"
                        />
                        <apex:actionFunction name="rerendermovesPanel" action="{!initialize_board_moves}" rerender="blacklist, whitelist,chessMoves" oncomplete="highlightWhitePieces()"
                        />
                        
                        <apex:commandButton styleClass="svg-bg-button undo" title="Undo Previous Move" oncomplete="back()" />
                        
                        <input type="button" class="svg-bg-button next" title="Redo Next Move" onclick="next()"></input>

                    </apex:form>

                    <apex:form>
                        <apex:commandButton styleClass="svg-bg-button start_new_game" title="Start New Game" action="{!setnewboard}" oncomplete="Set_New_Board()"
                            reRender="chessBoard,blacklist, whitelist,chessMoves" />
                    </apex:form>


                    <div>
                        <input type="button" class="svg-bg-button share" title="Share" onclick="share()"></input>
                        <input type="button" class="svg-bg-button new_window" title="Open in New Window" onclick="new_window()"></input>
                    </div>
                        
                </div>

                <div class="slider">
                    <input type="button" class="svg-bg-button hint" title="Hint" onclick="hint()"></input>
                    <div class="horizontal-slider">
                        <div class="slider-track">
                        </div>
                    </div>
                </div>

                <div class="chess_move">
                    <apex:outputPanel id="chessMoves">
                        <div class="move_grid">
                            <apex:repeat value="{!chess_moves}" var="row">
                                <!-- <div> -->
                                <apex:outputPanel rendered="{!MOD(row.row__c,2)==1}">
                                    <div class="move_grid_text">{!(row.row__c+1) / 2}.</div>
                                </apex:outputPanel>
                                <div class="move_grid_text">{!row.text__c}</div>
                                <!-- </div> -->
                            </apex:repeat>
                        </div>
                    </apex:outputPanel>
                </div>
            </div>
            
        </div>

        <script>
            // 1. Create a handy function for sending requests:
            async function postChessApi(data = {}) {
                // Convert data to JSON string
                data.depth = currentValue+1;
                const dataString = JSON.stringify(data);
                return new Promise((resolve, reject) => {
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.Chess.postChessData}',
                        dataString,
                        function (result, event) {
                            if (event.status) {
                                // console.log(typeof(JSON.parse(result)), JSON.parse(result));
                                resolve(JSON.parse(result)); // Success: process the result
                            } else {
                                reject(event.message); // Error: handle the error
                            }
                        },
                        { escape: false }
                    );
                });
            }

            let ws, ws_hint;

            let bar_text= document.querySelector('.eval_bar_text');
            let bar = document.querySelector('.eval_bar');

            // Function to connect or reconnect the main WebSocket `ws`
            function connectWS() {
                ws = new WebSocket('wss://chess-api.com/v1');

                ws.onopen = function (event) {
                    console.log("ws WebSocket connection opened.");
                    Chess.share_fen(function (result, ev) {
                        // console.log(result);
                        sendMessageWS(result); // Send the message using the sendMessageWS function
                    });
                };

                ws.onmessage = (event) => {
                    const chessApiMessage = JSON.parse(event.data);
                    // console.log('ws: ',chessApiMessage);
                    if ("winChance" in chessApiMessage) {
                        // console.log('ws: ', chessApiMessage['eval'].toFixed(1), parseInt(100 - chessApiMessage['winChance']) + '%');
                        bar_text.innerText = chessApiMessage['eval'].toFixed(1);
                        bar.style.height = parseInt(100 - chessApiMessage['winChance']) + '%';

                        if(chessApiMessage['eval']<0)
                        {
                            bar_text.classList.add('eval_bar_text_up');
                        }
                        else
                        {
                            bar_text.classList.remove('eval_bar_text_up');
                        }
                    }
                };

                ws.onclose = (event) => {
                    console.log("ws WebSocket connection closed.");
                    // setTimeout(connectWS, 1000); // Reconnect after 1 second
                };

                ws.onerror = (error) => {
                    console.error("ws WebSocket error: ", error);
                    ws.close(); // Close on error to trigger reconnect
                };
            }

            // Function to connect or reconnect the hint WebSocket `ws_hint`
            function connectWSHint() {
                ws_hint = new WebSocket('wss://chess-api.com/v1');

                ws_hint.onopen = function (event) {
                    console.log("ws_hint WebSocket connection opened.");
                };

                ws_hint.onmessage = (event) => {
                    const chessApiMessage = JSON.parse(event.data);

                    // console.log('ws_hint: ', chessApiMessage);

                    if('error' in chessApiMessage){
                    console.log('ws_hint: ', chessApiMessage);}

                    if ("fromNumeric" in chessApiMessage) {
                        const fromX = (8 - chessApiMessage.fromNumeric % 10);
                        const fromY = (Math.floor(chessApiMessage.fromNumeric / 10) - 1);
                        const toX = (8 - chessApiMessage.toNumeric % 10);
                        const toY = (Math.floor(chessApiMessage.toNumeric / 10) - 1);

                        remove_class('hint_color');

                        document.querySelector(`div.chessBoard div[data-x='${fromX}'][data-y='${fromY}']`).classList.add('hint_color');
                        document.querySelector(`div.chessBoard div[data-x='${toX}'][data-y='${toY}']`).classList.add('hint_color');
                    }
                };

                // ws_hint.onclose = (event) => {
                //     console.log("ws_hint WebSocket connection closed. Reconnecting...");
                //     setTimeout(connectWSHint, 1000); // Reconnect after 1 second
                // };

                ws_hint.onerror = (error) => {
                    console.error("ws_hint WebSocket error: ", error);
                    ws_hint.close(); // Close on error to trigger reconnect
                };
            }

            // Initialize both WebSocket connections
            connectWS();
            connectWSHint();

            // Function to send a message via `ws`
            function sendMessageWS(fen) {
                // console.log('ws send ',fen);
                console.log('before ws ', fen);
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({ fen, depth: currentValue + 1  }));
                } else {
                    console.warn("ws WebSocket is not open. Reconnecting...");
                    connectWS(); // Reconnect if needed
                    setTimeout(() => sendMessageWS(fen), 1000); // Retry after reconnection
                }
            }

            // Function to send a message via `ws_hint`
            function sendMessageWS_HINT(fen) {
                // console.log('ws_hint send ',fen);
                if (ws_hint && ws_hint.readyState === WebSocket.OPEN) {
                    ws_hint.send(JSON.stringify({ fen,depth: currentValue+1 }));
                } else {
                    console.warn("ws_hint WebSocket is not open. Reconnecting...");
                    connectWSHint(); // Reconnect if needed
                    setTimeout(() => sendMessageWS_HINT(fen), 1000); // Retry after reconnection
                }
            }

            const messageElement = document.getElementById('copyMessage');

            const checkbox = document.getElementById('switch');
            const switchValue = document.getElementById('switchValue');
            
            const checkbox2 = document.getElementById('switch2');
            const colorValue = document.getElementById('colorValue');

            const label_for_switch2 = document.querySelector("label[for=switch2]");
            
            let square_rule;

            function updateValue() {
                switchValue.value = checkbox.checked ? '1' : '0';
                if (checkbox.checked) {
                    label_for_switch2.classList.add('disabled-button');  // Disable the button
                } else {
                    label_for_switch2.classList.remove('disabled-button');  // Enable the button
                }
                // console.log('Switch value:', switchValue.value);
            }
            checkbox.addEventListener('change', updateValue);
            updateValue();

            function updateValue2() {
                colorValue.value = checkbox2.checked ? '1' : '0';
                // console.log('Switch value:', switchValue.value);
            }
            checkbox2.addEventListener('change', updateValue2);
            updateValue2();

            // document.addEventListener('DOMContentLoaded', function () {
            //         check_for_check();
            //     }, false);

            document.addEventListener('DOMContentLoaded', function () {
                chech_previous_moves();
                highlightWhitePieces();
            }, false);

            window.onload = function () {
                adjustScaleForElement();
                var stylesheet = document.styleSheets[7];
                for (var i = 0; i < stylesheet.cssRules.length; i++) {
                    var rule = stylesheet.cssRules[i];

                    // Check if the selectorText matches any of the specified selectors
                    if (rule.selectorText === '.square') {
                        square_rule = rule;
                    }
                }
            }

            // Adjust scale on page load and window resize
            // window.onload = adjustScaleForElement;
            window.onresize = adjustScaleForElement;
            
            const smallSquare = document.querySelector('.small-square');
            const c_board = document.querySelector('.makeboard');
            
            let rotation = 0;

            function flip_board() {
                rotation += 180; // Increment rotation by 180 degrees

                if(rotation % 360 === 180)
                {
                    smallSquare.style.backgroundColor = 'black';
                    document.querySelector('.blacklist').style.gridRow = 3;
                    document.querySelector('.whitelist').style.gridRow = 1;

                    square_rule.style.rotate='180deg';
                }
                else
                {
                    smallSquare.style.backgroundColor = 'white';
                    document.querySelector('.blacklist').style.gridRow = '';
                    document.querySelector('.whitelist').style.gridRow = '';
                    
                    square_rule.style.rotate = '';
                }

                time_interval = 100;

                [enemy_elo, player_elo] = [player_elo, enemy_elo];
                elo_update();

                setTimeout(() => {
                    smallSquare.style.transform = `rotate(${rotation - 135}deg) scale(0.7)`;
                    c_board.style.transform = `rotate(${rotation - 135}deg) scale(0.7)`;
                }, 0);

                setTimeout(() => {
                    smallSquare.style.transform = `rotate(${rotation - 90}deg) scale(0.6)`;
                    c_board.style.transform = `rotate(${rotation - 90}deg) scale(0.6)`;
                }, time_interval);

                setTimeout(() => {
                    smallSquare.style.transform = `rotate(${rotation - 45}deg) scale(0.6)`;
                    c_board.style.transform = `rotate(${rotation - 45}deg) scale(0.6)`;
                    
                    document.querySelectorAll('.square, .box, .bar_container').forEach(div => {
                        div.classList.toggle('rotate_this');
                    });
                    
                    document.querySelector('.flip_board').classList.toggle('flip_board_White');
                    label_for_switch2.click();

                    bar_text.classList.toggle('rotate_this');
                    
                }, 2 * time_interval);

                setTimeout(() => {
                    smallSquare.style.transform = `rotate(${rotation - 15}deg) scale(0.7)`; 
                    c_board.style.transform = `rotate(${rotation - 15}deg) scale(0.7)`; 
                }, 3 * time_interval);

                setTimeout(() => {
                    smallSquare.style.transform = `rotate(${rotation}deg) scale(1)`;
                    c_board.style.transform = `rotate(${rotation}deg) scale(1)`;
                }, 3.5 * time_interval);

            };

            function check_flip_board()
            {
                elo_update();
                if (rotation % 360 === 180)
                {
                    document.querySelectorAll('.box, .bar_container').forEach(div => {
                        if(!(div.classList.contains('rotate_this')))
                        {
                            div.classList.add('rotate_this');
                        }
                    });

                    bar_text.classList.add('rotate_this');

                    enemy_elo = document.getElementById('white_elo');
                    player_elo = document.getElementById('black_elo');
                }
                else
                {
                    enemy_elo = document.getElementById('black_elo');
                    player_elo = document.getElementById('white_elo');
                }
            }

            function elo_update() {
                enemy_elo = document.getElementById('black_elo');
                player_elo = document.getElementById('white_elo');

                if (rotation % 360 === 180)
                {
                    [enemy_elo, player_elo] = [player_elo, enemy_elo];
                }

                enemy_elo.textContent = (currentValue + 1) * 66 + 1640;
                player_elo.textContent = ['😁', '😄', '😃', '😀', '😊', '😏', '😎', '🙂', '😶', '😐', '😑', '🙁', '😕', '☹️', '😟', '😩', '😢', '💀'][currentValue];
            }

            
            let currentValue = 9;
            let enemy_elo = document.getElementById('black_elo');
            let player_elo = document.getElementById('white_elo');
            
            document.addEventListener('DOMContentLoaded', () => {
                const sliderTrack = document.querySelector('.slider-track');
                const totalBars = 18;
                let isDragging = false;

                // Create and append bars
                for (let i = 0; i < totalBars; i++) {
                    const bar = document.createElement('div');
                    bar.classList.add('bar');
                    sliderTrack.appendChild(bar);
                }

                // Function to update the bars based on the current value
                function updateBars(value) {
                    const bars = document.querySelectorAll('.slider-track .bar');
                    bars.forEach((bar, index) => {
                        if (index < value) {
                            bar.classList.add('active');
                            bar.classList.remove('selected');
                        } else if (index === value) {
                            bar.classList.add('selected');
                            bar.classList.remove('active');
                        } else {
                            bar.classList.remove('active', 'selected');
                        }
                    });

                    elo_update();
                }

                // Function to handle mouse and touch move
                function handleMove(event) {
                    if (!isDragging) return;
                    const rect = sliderTrack.getBoundingClientRect();
                    const clientX = event.clientX || event.touches[0].clientX; // Handle touch
                    const mouseX = clientX - rect.left;
                    const newValue = Math.floor((mouseX / rect.width) * totalBars);
                    currentValue = Math.max(0, Math.min(totalBars - 1, newValue));
                    updateBars(currentValue);
                }

                // Start dragging
                function startDragging(event) {
                    const rect = sliderTrack.getBoundingClientRect();
                    const clientX = event.clientX || event.touches[0].clientX; // Handle touch
                    currentValue = Math.floor((clientX - rect.left) / rect.width * totalBars);
                    currentValue = Math.max(0, Math.min(totalBars - 1, currentValue));
                    updateBars(currentValue);
                    isDragging = true;
                    event.preventDefault(); // Prevent default touch action
                }

                // Stop dragging
                function stopDragging() {
                    isDragging = false;
                }

                // Mouse and touch event listeners
                sliderTrack.addEventListener('mousedown', startDragging);
                sliderTrack.addEventListener('touchstart', startDragging);
                document.addEventListener('mouseup', stopDragging);
                document.addEventListener('touchend', stopDragging);
                document.addEventListener('mousemove', handleMove);
                document.addEventListener('touchmove', handleMove);

                // Initialize the bars
                updateBars(currentValue);
            });

            
            </script>
    </body>

</apex:page>
